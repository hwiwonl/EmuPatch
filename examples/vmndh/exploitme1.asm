.label main
	nop
	nop
	pop	r7		; recupere argc
	pop 	r5		; recpuere l'@ de arg
	test	r7, r7		; check argc pour les args
	jz	:error		; si aucun arguement envoi le message d'erreur
	call	:vuln		; sinon appel la fonction vuln
	end


;;;;;;;; Vuln function

.label 	vuln
	subb 	sp, #32		; malloc buffer
	mov 	r6, sp		; r6 = @buffer
.label	bcl
	mov	r4, [r5]	; place le caractere du arg dans r4
	test	r4, r4		; test si r4 = \0
	jz	:end		; si c'est la fin de la chaine on jmp @ la fin
	mov	[r6], [r5]	; copye les caracteres de arg vers buffer
	inc	r5		; incrementation pour decalage
	inc	r6		; incrementation pour decalage
	jmpl	:bcl		; boucle

.label  end
	addb 	sp, #32		; remet la stack
	ret

;;;;;;;; EOF Vuln function


;;;;;;;; Error function

.label 	error
	movb r0, #4
	movb r1, #1
	movl r2, :string
	movb r3, #22
	syscall
	movb r0, #1
	syscall

;;;;;;;; EOF Error function

.label string
.db "Error: need argument", 0x0a, 0x00

